// 1 задание

// var a = 1, b = 1, c, d;
// c = ++a; alert(c);           // 2 - префиксная форма, определяем переменную "с" как а + 1, действие выполняем до вывода на экран
// d = b++; alert(d);           // 1 - постфиксная форма, переменная "d" определяется как равная "b", то есть 1, потом выводим это значение и только потом действие b+1
// c = (2 + ++a); alert(c);      // 5 - во 2 строке мы добавили переменной "а" единичку, и теперь ей присвоено значение 2. дальше действия такие: (2 + (2+1)) = 2 + 3 = 5 (префиксная форма, поэтому сначала добавляем 1, потом выводим ответ)
// d = (2 + b++); alert(d);      // 4 то же, что и в выражении выше, только постфиксная форма, поэтому d = (2 + 2), затем alert (4), и после +1
// alert(a);                    // 3 - в 4 строке к новому значению а = 2 добавили ещё 1, стало 3
// alert(b);                    // 3 - в 5 строке к новому значению b = 2 добавили ещё 1, стало 3

// 2 задание 

// var a = 2;
// var x = 1 + (a *= 2); // var x = 1 + (a = 2 * 2); - будет 5

// 3 задание

// var a = -5
// var b = 10;

// if (a >= 0 && b >= 0) {
//     alert(a - b)
// } else if (a < 0 && b < 0) {
//     alert(a * b)
// } else {
//     alert(a + b)
// }

// 4 задание

// var a = (Math.random() * 14 + 0).toFixed(); // чтобы вывести тут все числа, думаю, нужен цикл, мы ещё их не прошли
// switch (a > 0) {
//     case (a < 14):
//         alert(a);
//         a++;
// }

// 5 задание

// function sum(a, b) {
//     return a + b;
// }

// function sub(a, b) {
//     return a - b;
// }

// function mult(a, b) {
//     return a + b;
// }

// function div(a, b) {
//     return a + b;
// }

// 6 задание

// function mathOperation(arg1, arg2, operation) {
//     switch (operation) {
//         case "-":
//             return (arg1 - arg2);

//         case "*":
//             return (arg1 * arg2);

//         case "+":
//             return (arg1 + arg2);

//         default:
//             alert("Неверный знак")
//     }
// }

// mathOperation(1, 3, "*")

// 7 задание:

// Начнём с того, что 0 и null разные типы. 0 - число, в Js это не 0, а бесконечно малое число, а null это просто "ничего", пустое значение, поделить на него нельзя

// прочитал интересную статью про сравнение 0 и null, где второе преобразовывается в +0, но при сравнении всё же не равно 0, но null >= 0 (true), так как спецификация говорит, если null < 0 принимает значение false, то null >= 0 принимает значение true





